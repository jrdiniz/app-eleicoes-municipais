---
- name: Playbook to deploy Eleições Municipais - v0.1
  hosts: 127.0.0.1
  connection: local
  
  vars:
    application_user: 'eleicoes'
    application_group: 'webpoint'
    application_logfile: 'eleicoes'
    application_path: '/u/htdocs/webpoint'

    mysql_address: "localhost"
    mysql_user: "{{ application_user }}"
    mysql_database: "eleicoes_db"
    mysql_password: "DMr61uAYQhtcgjEjFlyfLsC5VYn"

    port: 8090
    virtualhost_config: '{{ application_user }}.conf'
    url: '{{ application_user }}.gorobei.net'

  tasks:
  - name: Install SO dependecies
    package:
      name:
        - python3-dev
        - libmysqlclient-dev
        - python3-venv
        - pkg-config
        - default-libmysqlclient-dev
        - build-essential
        - nodejs
        - npm
        - nginx
      state: present

  - name: Create application user
    user:
      name: '{{ application_user }}'
      comment: Application User
      group: '{{application_group}}'
      shell: /bin/bash
      state: present
      home: '{{ application_path }}/{{ application_user }}'

  - name: Create public_html directory
    file:
      path: '{{ application_path }}/{{ application_user }}/public_html'
      state: directory
      owner: '{{ application_user }}'
      group: '{{application_group}}'
      mode: 0755

  - name: Create logfile
    file:
      path: '{{ application_path }}/{{ application_user }}/public_html/{{ application_logfile }}'
      state: touch
      owner: '{{ application_user }}'
      group: '{{application_group}}'
      mode: 0644

  - name: Copy Application Source
    copy:
      src: ./app
      dest: '{{ application_path }}/{{ application_user }}/public_html/'
      remote_src: yes
      owner: '{{ application_user }}'
      group: '{{application_group}}'

  - name: Create systemd service file
    template:
      src: .service
      dest: /etc/systemd/system/{{application_user}}.service
    notify:
      - Restart Systemd

  - name: Copy requirements.txt
    copy:
      src: ./requirements.txt
      dest: '{{ application_path }}/{{ application_user }}/public_html/'
      remote_src: yes
      owner: '{{ application_user }}'
      group: '{{application_group}}'

  - name: Copy WSGI
    copy:
      src: ./wsgi.py
      dest: '{{ application_path }}/{{ application_user }}/public_html/'
      remote_src: yes
      owner: '{{ application_user }}'
      group: '{{application_group}}'

  - name: Gunicorn config file
    template:
      src: gunicorn.conf.py
      dest: "{{ application_path }}/{{ application_user }}/public_html/"
      remote_src: yes
      owner: '{{ application_user }}'
      group: '{{ application_group }}'

  - name: Configuration file
    copy:
      src: ./config.py
      dest: '{{ application_path }}/{{ application_user }}/public_html/'
      remote_src: yes
      owner: '{{ application_user }}'
      group: '{{application_group}}'

  - name: .env file
    copy:
      dest: '{{ application_path }}/{{ application_user }}/public_html/.env'
      owner: '{{ application_user }}'
      group: '{{application_group}}'
      content: |
        FLASK_APP=opentraining
        FLASK_ENV=production
        FLASK_CONFIG_FILE=config.ProductionConfig
        SECRET_KEY=)qeC!i3(JMPw56JY1S9W\a&3mdjf9Hc=v(Wpz1VHV5)*Xj~:wdf9B,Vl
        MYSQL_ADDRESS={{ mysql_address }}
        MYSQL_DATABASE={{ mysql_database }}
        MYSQL_USER={{ mysql_user }}
        MYSQL_PASSWORD={{ mysql_password }}

  - name: Create python virtualenv and install requirements
    pip:
      virtualenv_command: /usr/bin/python3 -m venv
      virtualenv: '{{ application_path }}/{{ application_user }}/public_html/env'
      requirements: '{{ application_path }}/{{ application_user }}/public_html/requirements.txt'

  - name: Install npm packages from package.json
    community.general.npm:
      path: '{{ application_path }}/{{ application_user }}/public_html/app/static'
      state: present

  - name: Nginx Virtual Host
    template:
      src: .virtualhost
      dest: /etc/nginx/conf.d/{{ virtualhost_config }}

  - name: Check Nginx configuration
    command: nginx -t
    register: nginx_test
    failed_when: nginx_test.rc != 0
    notify:
      - Restart Nginx

  - name: Restart Application
    systemd:
      name: eleicoes
      state: restarted

  handlers:
  - name: Restart Systemd
    systemd:
      daemon_reload: yes

  - name: Restart Nginx
    service:
      name: nginx
      state: restarted

  - name: Restart Application
    systemd:
      name: eleicoes
      state: restarted
